// Рекурсия и двумерные массивы

/* указываем тип данных, в скобочках ставим запятую(!) - что и указывает на многомерность (в строку или в столбец)
даем наименование массиву равно новое название и в скобках ставим размерность нашенго массива [x, y] -
х - строки
у - столбцы.

string[,] table = new string[2,3]; - массив строк
int[,] matrix = new int[5, 8]; - массив чисел

*/

string[,] table = new string[2, 5];

/* для того чтобы обратиться к нужному элементу, указываем наименование массива
и далее в квадратных скобочках сначала индекс строки и индекс стоблца - table[1, 2]
после это мы с ней можем работать как и ранее, как с обычной переменной
*/

/*
индексы которые мы будем использовапть как для строк как и для столбцов, 
меняются от 0!, т.е. если рассматривать весь наш массив у нас получиться:
по умолчанию для строк инициализация просиходит константой:
String.Empty - пустой строкой, ничего не содержащей.
table[0, 0]  table[0, 1]  table[0, 2] ... table[0, 4]  
table[1, 0]  table[1, 1]  table[1, 2] ... table[1, 4]
*/
/*
table[1, 2] = "слово";
//напишим цикл для того чтобы распечатать массив
for (int rows = 0; rows < 2; rows++)  //цикл для строк
{
    for (int columns = 0; columns <  5; columns++) //цикл для столбцов
    {
        Console.WriteLine($"-{table[rows, columns]}-"); //вывод через обращение к элементам массива
    }
}
*/
/*
int[,] matrix = new int[3, 4];
for (int rows = 0; rows < matrix.GetLength(0); rows++)  //цикл для строк
{
    for (int columns = 0; columns <  matrix.GetLength(1); columns++) //цикл для столбцов
    {
        Console.Write($"{matrix[rows, columns]} "); //вывод через обращение к элементам массива
    }
Console.WriteLine(); //принудительный переход на новую строку
}*/

/* при инициализацици в массиве всегда указываем количество строк и столбцов
при работе с массивом появляется например в циклах или методах,
количество строк можно получить применяя функцию имямассива.GetLength()
в примере в качестве аргументв передали (0) - означет количество строки, 
в нашем случае это - 3. 
Аналигично со столбцами.*/

/* напишим МЕТОД к-й будет отдельно печатать двумерную матрицу на экран 
и заполнять ее числами */


void PrintArray(int[,] matr) //в качестве агрумента передает прямоугольную таблицу чисел
{
    for (int rows = 0; rows < matr.GetLength(0); rows++)  
    {
        for (int columns = 0; columns <  matr.GetLength(1); columns++) 
        {
            Console.Write($"{matr[rows, columns]} "); 
        }
        Console.WriteLine(); 
    }
}

// опишем доп.метод который будет заполнять матрицу случайными числами

void FillArray(int[,] matr)
{
    for (int rows = 0; rows < matr.GetLength(0); rows++)  
    {
        for (int columns = 0; columns <  matr.GetLength(1); columns++) 
        {
            matr[rows, columns] = new Random().Next(1,10); 
        }
    }
}

int[,] matrix = new int[3, 4];
PrintArray (matrix);
Console.WriteLine();
FillArray (matrix);
PrintArray (matrix);